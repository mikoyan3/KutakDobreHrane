{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:4000/users';\n  }\n  login(username, password, userRole) {\n    let data = {\n      username: username,\n      password: password,\n      userRole: userRole\n    };\n    return this.http.post(\"http://localhost:4000/users/login\", data);\n  }\n  login_admin(username, password) {\n    let data = {\n      username: username,\n      password: password\n    };\n    return this.http.post(\"http://localhost:4000/users/login_admin\", data);\n  }\n  registerGost(username, password, securityQuestion, securityAnswer, name, surname, gender, address, phoneNumber, email, file, creditCardNumber) {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('username', username);\n    formData.append('password', password);\n    formData.append('securityQuestion', securityQuestion);\n    formData.append('securityAnswer', securityAnswer);\n    formData.append('name', name);\n    formData.append('surname', surname);\n    formData.append('gender', gender);\n    formData.append('address', address);\n    formData.append('phoneNumber', phoneNumber);\n    formData.append('email', email);\n    formData.append('creditCardNumber', creditCardNumber);\n    return this.http.post(\"http://localhost:4000/users/registerGost\", formData);\n  }\n  promenaLozinke(username, password, newPassword) {\n    let data = {\n      username: username,\n      password: password,\n      newPassword: newPassword\n    };\n    return this.http.post(\"http://localhost:4000/users/promenaLozinke\", data);\n  }\n  dohvatanjeKorisnikaNaOsnovuUsername(username) {\n    let data = {\n      username: username\n    };\n    return this.http.post(\"http://localhost:4000/users/dohvatanjeKorisnikaNaOsnovuUsername\", data);\n  }\n  novaLozinka(username, newPassword) {\n    let data = {\n      username: username,\n      newPassword: newPassword\n    };\n    return this.http.post(\"http://localhost:4000/users/novaLozinka\", data);\n  }\n  getNumberOfRegisteredGost() {\n    return this.http.get(\"http://localhost:4000/users/getNumberOfRegisteredGost\");\n  }\n  getAllKonobari() {\n    return this.http.get(\"http://localhost:4000/users/getAllKonobari\");\n  }\n  getFileGost(username) {\n    let data = {\n      username: username\n    };\n    return this.http.post(\"http://localhost:4000/users/getFileGost\", data, {\n      responseType: 'arraybuffer'\n    });\n  }\n  getFileKonobar(username) {\n    let data = {\n      username: username\n    };\n    return this.http.post(\"http://localhost:4000/users/getFileKonobar\", data, {\n      responseType: 'arraybuffer'\n    });\n  }\n  updateProfileGost(user) {\n    return this.http.put(`${this.baseUrl}/updateProfileGost/${user.username}`, user);\n  }\n  updatePictureGost(username, file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('username', username);\n    return this.http.post(\"http://localhost:4000/users/updatePictureGost\", formData);\n  }\n  updateProfileKonobar(user) {\n    return this.http.put(`${this.baseUrl}/updateProfileKonobar/${user.username}`, user);\n  }\n  updatePictureKonobar(username, file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('username', username);\n    return this.http.post(\"http://localhost:4000/users/updatePictureKonobar\", formData);\n  }\n  getInfoForStatistics(konobar, restoran) {\n    let data = {\n      konobar: konobar,\n      restoran: restoran\n    };\n    return this.http.post(\"http://localhost:4000/users/getInfoForStatistics\", data);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UserService","constructor","http","baseUrl","login","username","password","userRole","data","post","login_admin","registerGost","securityQuestion","securityAnswer","name","surname","gender","address","phoneNumber","email","file","creditCardNumber","formData","FormData","append","promenaLozinke","newPassword","dohvatanjeKorisnikaNaOsnovuUsername","novaLozinka","getNumberOfRegisteredGost","get","getAllKonobari","getFileGost","responseType","getFileKonobar","updateProfileGost","user","put","updatePictureGost","updateProfileKonobar","updatePictureKonobar","getInfoForStatistics","konobar","restoran","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Perovic\\Desktop\\PIA\\front\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { konobar } from '../models/konobar';\nimport { gost } from '../models/gost';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string, userRole: string){\n    let data = {\n      username: username,\n      password: password,\n      userRole: userRole\n    }\n    return this.http.post(\"http://localhost:4000/users/login\", data)\n  }\n\n  login_admin(username: string, password: string){\n    let data = {\n      username: username,\n      password: password\n    }\n    return this.http.post(\"http://localhost:4000/users/login_admin\", data)\n  }\n\n  registerGost(username: string, password: string, securityQuestion: string, securityAnswer: string, name: string, surname: string, gender: string, address: string, phoneNumber: string, email: string, file: File, creditCardNumber: string): Observable<any>{\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('username', username);\n    formData.append('password', password);\n    formData.append('securityQuestion', securityQuestion);\n    formData.append('securityAnswer', securityAnswer);\n    formData.append('name', name);\n    formData.append('surname', surname);\n    formData.append('gender', gender);\n    formData.append('address', address);\n    formData.append('phoneNumber', phoneNumber);\n    formData.append('email', email);\n    formData.append('creditCardNumber', creditCardNumber);\n    return this.http.post<string>(\"http://localhost:4000/users/registerGost\", formData);\n  }\n\n  promenaLozinke(username: string, password: string, newPassword: string){\n    let data = {\n      username: username,\n      password: password,\n      newPassword: newPassword\n    }\n    return this.http.post(\"http://localhost:4000/users/promenaLozinke\", data)\n  }\n\n  dohvatanjeKorisnikaNaOsnovuUsername(username: string){\n    let data = {\n      username: username\n    }\n    return this.http.post(\"http://localhost:4000/users/dohvatanjeKorisnikaNaOsnovuUsername\", data)\n  }\n\n  novaLozinka(username: string, newPassword: string){\n    let data = {\n      username: username,\n      newPassword: newPassword\n    }\n    return this.http.post(\"http://localhost:4000/users/novaLozinka\", data)\n  }\n\n  getNumberOfRegisteredGost(){\n    return this.http.get<number>(\"http://localhost:4000/users/getNumberOfRegisteredGost\");\n  }\n\n  getAllKonobari(){\n    return this.http.get<konobar[]>(\"http://localhost:4000/users/getAllKonobari\");\n  }\n\n  getFileGost(username: string): Observable<ArrayBuffer>{\n    let data = {\n      username: username\n    }\n    return this.http.post(\"http://localhost:4000/users/getFileGost\", data, { responseType: 'arraybuffer'})\n  }\n\n  getFileKonobar(username: string): Observable<ArrayBuffer>{\n    let data = {\n      username: username\n    }\n    return this.http.post(\"http://localhost:4000/users/getFileKonobar\", data, { responseType: 'arraybuffer'})\n  }\n\n  private baseUrl = 'http://localhost:4000/users'; \n\n  updateProfileGost(user: gost): Observable<any> {\n    return this.http.put<gost>(`${this.baseUrl}/updateProfileGost/${user.username}`, user);\n  }\n\n  updatePictureGost(username: string, file: File){\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('username', username)\n    return this.http.post(\"http://localhost:4000/users/updatePictureGost\", formData);\n  }\n\n  updateProfileKonobar(user: konobar): Observable<any> {\n    return this.http.put<konobar>(`${this.baseUrl}/updateProfileKonobar/${user.username}`, user);\n  }\n\n  updatePictureKonobar(username: string, file: File){\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('username', username)\n    return this.http.post(\"http://localhost:4000/users/updatePictureKonobar\", formData);\n  }\n\n  getInfoForStatistics(konobar: string, restoran: string){\n    let data = {\n      konobar: konobar,\n      restoran: restoran\n    }\n    return this.http.post(\"http://localhost:4000/users/getInfoForStatistics\", data);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}